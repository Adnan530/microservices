server:
  port: 8081

spring:
  application:
    name: USER-SERVICE
  datasource:
    url: jdbc:postgresql://localhost:5432/microservices
    username: postgres
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

eureka:   #Configuration for creating User service as a client
  instance:
    prefer-ip-address: true
  client:
    fetch-registry: true #this property is by default true just added for learning purpose
    register-with-eureka: true #this property is by default true just added for learning purpose
    service-url:
      defaultZone: http://localhost:8761/eureka

management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health

  endpoint:
    health:
      show-details: always

resilience4j:
  circuitbreaker: # Configuration for circuit breaker
    instances:
      ratingHotelBreaker:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 6s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED

  retry:
    instances:
      ratingHotelRetry:
        max-attempts: 5                # The number of retry attempts before failing
        wait-duration: 5s              # Delay between retries (5 seconds)

  rateLimiter:
    instances:
      userRateLimiter:
        limit-refresh-period: 4s
        limit-for-period: 2 #maximum number of requests here it is 2
        wait-duration: 0s

#The rate limiter allows 2 requests every 4 seconds.
#Once the rate limit (2 requests) is reached, any subsequent requests will not be processed immediately and will be rejected without waiting (because wait-duration is 0s).
#The rate limit will reset after 4 seconds.

